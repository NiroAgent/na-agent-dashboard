AWSTemplateFormatVersion: "2010-09-09"
Description: "Fix VF-Dev API Server - Deploy minimal-server.js to EC2"

Parameters:
  InstanceType:
    Type: String
    Default: t3.micro
    Description: EC2 instance type for API server

Resources:
  # Security Group for API server
  APIServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for VF-Dev API server
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 7777
          ToPort: 7777
          CidrIp: 0.0.0.0/0
          Description: API server port
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH access
      Tags:
        - Key: Name
          Value: vf-dev-api-security-group

  # IAM Role for EC2 instance
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: Name
          Value: vf-dev-api-instance-role

  # Instance Profile
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  # EC2 Instance for API server
  APIServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: ami-0a19bcec6d2ec60fb  # Amazon Linux 2023 (latest)
      SecurityGroupIds:
        - !Ref APIServerSecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          dnf update -y
          
          # Install Node.js using Amazon Linux 2023 package manager
          dnf install -y nodejs npm git
          
          # Create app directory
          mkdir -p /opt/api
          cd /opt/api
          
          # Create minimal package.json
          cat > package.json << 'PACKAGE_EOF'
          {
            "name": "vf-dev-api",
            "version": "1.0.0",
            "main": "server.js",
            "dependencies": {
              "express": "^4.18.2",
              "cors": "^2.8.5",
              "socket.io": "^4.7.2"
            }
          }
          PACKAGE_EOF
          
          # Create the server file
          cat > server.js << 'SERVER_EOF'
          const express = require('express');
          const http = require('http');
          const cors = require('cors');
          const { Server } = require('socket.io');
          
          const app = express();
          const server = http.createServer(app);
          const io = new Server(server, {
            cors: {
              origin: "*",
              methods: ["GET", "POST"]
            }
          });
          
          app.use(cors());
          app.use(express.json());
          
          // Mock agents data
          const agents = [
            {
              id: "qa-agent-real",
              name: "QA Agent (Real)",
              status: "idle",
              type: "qa",
              description: "AI-powered quality assurance testing",
              cpuUsage: 15,
              memoryUsage: 32,
              taskCount: 0,
              platform: "live-process",
              pid: null,
              environment: "production",
              source: "vf-dev-api",
              last_updated: new Date().toISOString()
            },
            {
              id: "developer-agent-real", 
              name: "Developer Agent (Real)",
              status: "idle",
              type: "developer",
              description: "AI-powered development assistant",
              cpuUsage: 18,
              memoryUsage: 38,
              taskCount: 0,
              platform: "live-process", 
              pid: null,
              environment: "production",
              source: "vf-dev-api",
              last_updated: new Date().toISOString()
            },
            {
              id: "orchestrator-agent",
              name: "Agent Orchestrator", 
              status: "busy",
              type: "orchestrator",
              description: "Coordinates and manages other agents",
              cpuUsage: 25,
              memoryUsage: 45,
              taskCount: 3,
              platform: "live-process",
              pid: 12345,
              environment: "production", 
              source: "vf-dev-api",
              last_updated: new Date().toISOString()
            }
          ];
          
          // Health endpoint
          app.get('/health', (req, res) => {
            res.json({
              status: 'healthy',
              timestamp: new Date().toISOString(),
              service: 'vf-dev-api',
              agents: agents.length,
              environment: 'production'
            });
          });
          
          // Agents endpoint for frontend compatibility
          app.get('/api/agents', (req, res) => {
            const updatedAgents = agents.map(agent => ({
              ...agent,
              cpuUsage: Math.floor(10 + Math.random() * 30),
              memoryUsage: Math.floor(20 + Math.random() * 40),
              last_updated: new Date().toISOString()
            }));
            
            res.json(updatedAgents);
          });
          
          // Dashboard agents endpoint
          app.get('/api/dashboard/agents', (req, res) => {
            const updatedAgents = agents.map(agent => ({
              ...agent,
              cpuUsage: Math.floor(10 + Math.random() * 30),
              memoryUsage: Math.floor(20 + Math.random() * 40),
              last_updated: new Date().toISOString()
            }));
            
            res.json({
              success: true,
              agents: updatedAgents,
              totalAgents: updatedAgents.length,
              activeAgents: updatedAgents.filter(a => a.status === 'busy').length,
              lastUpdated: new Date().toISOString(),
              source: 'vf-dev-api'
            });
          });
          
          // WebSocket for real-time updates
          io.on('connection', (socket) => {
            console.log('Dashboard connected:', socket.id);
            
            // Send initial agent data
            socket.emit('agents-update', {
              agents: agents,
              timestamp: new Date().toISOString()
            });
            
            socket.on('disconnect', () => {
              console.log('Dashboard disconnected:', socket.id);
            });
          });
          
          const PORT = 7777;
          server.listen(PORT, '0.0.0.0', () => {
            console.log('VF-Dev API running on port 7777');
            console.log('Health: http://localhost:7777/health');
            console.log('Agents: http://localhost:7777/api/dashboard/agents');
          });
          SERVER_EOF
          
          # Install dependencies and start server
          npm install
          
          # Start server in background with PM2-like behavior
          nohup node server.js > /var/log/api-server.log 2>&1 &
          
          # Enable service to start on boot
          cat > /etc/systemd/system/vf-dev-api.service << 'SERVICE_EOF'
          [Unit]
          Description=VF-Dev API Server
          After=network.target
          
          [Service]
          Type=simple
          User=ec2-user
          WorkingDirectory=/opt/api
          ExecStart=/usr/bin/node server.js
          Restart=always
          RestartSec=10
          Environment=NODE_ENV=production
          
          [Install]
          WantedBy=multi-user.target
          SERVICE_EOF
          
          systemctl enable vf-dev-api
          systemctl start vf-dev-api
          
      Tags:
        - Key: Name
          Value: vf-dev-api-server
        - Key: Environment
          Value: development

Outputs:
  APIServerURL:
    Description: URL for the VF-Dev API server
    Value: !Sub "http://${APIServerInstance.PublicIp}:7777"
    Export:
      Name: !Sub "${AWS::StackName}-api-url"
      
  APIServerIP:
    Description: Public IP of the API server
    Value: !Ref APIServerInstance
    Export:
      Name: !Sub "${AWS::StackName}-api-ip"
      
  HealthCheckURL:
    Description: Health check URL
    Value: !Sub "http://${APIServerInstance.PublicIp}:7777/health"