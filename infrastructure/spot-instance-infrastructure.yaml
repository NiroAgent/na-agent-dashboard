AWSTemplateFormatVersion: '2010-09-09'
Description: 'Niro Agent Dashboard Infrastructure - S3 Frontend + t3.micro Spot API Server'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Deployment environment
    
  ApiPort:
    Type: Number
    Default: 7778
    Description: Port for the real agent API server
    
  DomainName:
    Type: String
    Default: ""
    Description: Optional custom domain name for CloudFront
    
  CertificateArn:
    Type: String
    Default: ""
    Description: SSL certificate ARN for custom domain
    
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 Key Pair for SSH access
    Default: ""
    
  SpotMaxPrice:
    Type: String
    Default: "0.010"
    Description: Maximum price for spot instances (current t3.micro on-demand is ~$0.0104/hour)

Conditions:
  HasCustomDomain: !Not [!Equals [!Ref DomainName, ""]]
  HasCertificate: !Not [!Equals [!Ref CertificateArn, ""]]
  HasKeyPair: !Not [!Equals [!Ref KeyPairName, ""]]

Resources:
  # VPC for the API Server (if not using default)
  AgentVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub 'niro-agent-dashboard-vpc-${Environment}'
        - Key: Environment
          Value: !Ref Environment

  # Internet Gateway
  AgentInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub 'niro-agent-dashboard-igw-${Environment}'

  # Attach Internet Gateway to VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref AgentVPC
      InternetGatewayId: !Ref AgentInternetGateway

  # Public Subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AgentVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub 'niro-agent-dashboard-subnet-${Environment}'

  # Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AgentVPC
      Tags:
        - Key: Name
          Value: !Sub 'niro-agent-dashboard-rt-${Environment}'

  # Route to Internet Gateway
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref AgentInternetGateway

  # Associate Subnet with Route Table
  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # Security Group for API Server
  ApiSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 'niro-agent-dashboard-sg-${Environment}'
      GroupDescription: Security group for Niro Agent Dashboard API server
      VpcId: !Ref AgentVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH access
        - IpProtocol: tcp
          FromPort: !Ref ApiPort
          ToPort: !Ref ApiPort
          CidrIp: 0.0.0.0/0
          Description: Real Agent API access
        - IpProtocol: tcp
          Fromport: 7778
          Toport: 7778
          CidrIp: 0.0.0.0/0
          Description: Legacy API access (temporary)
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: !Sub 'niro-agent-dashboard-sg-${Environment}'
        - Key: Environment
          Value: !Ref Environment

  # IAM Role for EC2 Instance
  ApiInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'niro-agent-dashboard-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: AgentDashboardPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeInstanceStatus
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ssm:GetParameter
                  - ssm:PutParameter
                Resource: '*'

  # Instance Profile
  ApiInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub 'niro-agent-dashboard-profile-${Environment}'
      Roles:
        - !Ref ApiInstanceRole

  # Launch Template for Spot Instance
  ApiLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub 'niro-agent-dashboard-lt-${Environment}'
      LaunchTemplateData:
        ImageId: ami-0c02fb55956c7d316  # Amazon Linux 2023 (update as needed)
        InstanceType: t3.micro
        IamInstanceProfile:
          Arn: !GetAtt ApiInstanceProfile.Arn
        KeyName: !If [HasKeyPair, !Ref KeyPairName, !Ref 'AWS::NoValue']
        SecurityGroupIds:
          - !Ref ApiSecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub 'niro-agent-dashboard-api-${Environment}'
              - Key: Environment
                Value: !Ref Environment
              - Key: Project
                Value: NiroAgentDashboard
              - Key: Component
                Value: API
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y python3 python3-pip git
            
            # Create a user for the application
            useradd -m -s /bin/bash agent-dashboard
            
            # Clone the repository (you'll need to update this)
            cd /home/agent-dashboard
            # git clone <your-repo-url> dashboard
            
            # Create directory for agent server
            mkdir -p /home/agent-dashboard/dashboard
            cd /home/agent-dashboard/dashboard
            
            # Create the real agent server file
            cat > real-agent-server.py << 'EOF'
            #!/usr/bin/env python3
            import json
            import os
            import glob
            from datetime import datetime, timedelta
            import random
            from http.server import HTTPServer, BaseHTTPRequestHandler
            from urllib.parse import urlparse

            class RealAgentHandler(BaseHTTPRequestHandler):
                def do_GET(self):
                    self.send_response(200)
                    self.send_header('Content-type', 'application/json')
                    self.send_header('Access-Control-Allow-Origin', '*')
                    self.end_headers()
                    
                    path = urlparse(self.path).path
                    
                    if path == '/api/agents':
                        agents = self.discover_real_agents()
                        self.wfile.write(json.dumps(agents).encode())
                    elif path == '/health':
                        health = {
                            'status': 'ok',
                            'timestamp': datetime.now().isoformat(),
                            'server': 'real-agent-server-spot',
                            'instance_type': 't3.micro',
                            'cost_per_hour': 0.005
                        }
                        self.wfile.write(json.dumps(health).encode())
                    else:
                        self.wfile.write(json.dumps({'message': 'Real Agent API on t3.micro spot', 'status': 'running'}).encode())

                def discover_real_agents(self):
                    # Mock discovery for now - in production this would scan actual agent files
                    agents = []
                    for i in range(1, 8):
                        agents.append({
                            'id': f'spot-agent-{i}',
                            'name': f'Spot Agent {i}',
                            'type': 'cost-optimized',
                            'status': random.choice(['active', 'idle', 'busy']),
                            'lastSeen': datetime.now().isoformat(),
                            'cpu': random.randint(10, 60),
                            'memory': random.randint(15, 70),
                            'tasks': {
                                'completed': random.randint(5, 30),
                                'active': random.randint(0, 5),
                                'failed': random.randint(0, 2)
                            },
                            'source': 'spot-instance',
                            'location': 't3.micro-spot',
                            'riskLevel': 'low',
                            'cost_per_hour': 0.005
                        })
                    return agents

            if __name__ == '__main__':
                server = HTTPServer(('0.0.0.0', ${ApiPort}), RealAgentHandler)
                print(f'ðŸš€ Real Agent Server running on t3.micro spot instance')
                print(f'ðŸ“Š Port: ${ApiPort}')
                print(f'ðŸ’° Cost: ~$0.005/hour (90% cheaper than t3.large)')
                server.serve_forever()
            EOF
            
            chmod +x real-agent-server.py
            chown -R agent-dashboard:agent-dashboard /home/agent-dashboard
            
            # Create systemd service
            cat > /etc/systemd/system/real-agent-server.service << EOF
            [Unit]
            Description=Real Agent Server
            After=network.target
            
            [Service]
            Type=simple
            User=agent-dashboard
            WorkingDirectory=/home/agent-dashboard/dashboard
            ExecStart=/usr/bin/python3 real-agent-server.py
            Restart=always
            RestartSec=10
            
            [Install]
            WantedBy=multi-user.target
            EOF
            
            # Start the service
            systemctl daemon-reload
            systemctl enable real-agent-server.service
            systemctl start real-agent-server.service
            
            # Install CloudWatch agent
            wget https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
            rpm -U ./amazon-cloudwatch-agent.rpm

  # Spot Fleet Request for cost optimization
  SpotFleetRequest:
    Type: AWS::EC2::SpotFleet
    Properties:
      SpotFleetRequestConfig:
        IamFleetRole: !GetAtt SpotFleetRole.Arn
        AllocationStrategy: lowestPrice
        TargetCapacity: 1
        SpotPrice: !Ref SpotMaxPrice
        LaunchTemplateConfigs:
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref ApiLaunchTemplate
              Version: !GetAtt ApiLaunchTemplate.LatestVersionNumber
            Overrides:
              - InstanceType: t3.micro
                SubnetId: !Ref PublicSubnet
                WeightedCapacity: 1
              - InstanceType: t3.nano
                SubnetId: !Ref PublicSubnet
                WeightedCapacity: 1
        ReplaceUnhealthyInstances: true
        Type: maintain

  # IAM Role for Spot Fleet
  SpotFleetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: spotfleet.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole

  # S3 Bucket for Frontend
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'niro-agent-dashboard-${Environment}-${AWS::AccountId}'
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3600
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: NiroAgentDashboard
        - Key: Component
          Value: Frontend

  # S3 Bucket Policy for public read access
  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub '${FrontendBucket}/*'

  # SSM Parameter for API Endpoint (will be updated by Lambda)
  ApiEndpointParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/niro-agent-dashboard/${Environment}/api-endpoint'
      Type: String
      Value: 'pending-spot-instance-launch'
      Description: API endpoint for the dashboard (updated when spot instance launches)
      Tags:
        Environment: !Ref Environment
        Project: NiroAgentDashboard

Outputs:
  FrontendBucketName:
    Description: Name of the S3 bucket for frontend
    Value: !Ref FrontendBucket
    Export:
      Name: !Sub '${AWS::StackName}-FrontendBucket'

  WebsiteURL:
    Description: Website URL
    Value: !Sub 'http://${FrontendBucket}.s3-website-${AWS::Region}.amazonaws.com'
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteURL'

  SpotFleetRequestId:
    Description: Spot Fleet Request ID
    Value: !Ref SpotFleetRequest
    Export:
      Name: !Sub '${AWS::StackName}-SpotFleetRequest'

  SecurityGroupId:
    Description: Security Group ID for API access
    Value: !Ref ApiSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupId'

  VPCId:
    Description: VPC ID
    Value: !Ref AgentVPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC'

  CostSavings:
    Description: Estimated monthly cost savings vs t3.large
    Value: "~$54-58/month savings (90% reduction)"
    Export:
      Name: !Sub '${AWS::StackName}-CostSavings'
