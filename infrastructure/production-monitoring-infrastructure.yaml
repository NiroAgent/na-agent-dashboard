AWSTemplateFormatVersion: "2010-09-09"
Description: "Production Agent Monitoring Infrastructure - Real Agent System"

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues: [staging, production]
    Description: Deployment environment
  
  InstanceType:
    Type: String
    Default: t3.small
    Description: EC2 instance type for monitoring server
  
  KeyPairName:
    Type: String
    Description: EC2 Key Pair for SSH access
    Default: niro-agent-keypair

Resources:
  # VPC and Networking
  MonitoringVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-monitoring-vpc"
        - Key: Environment
          Value: !Ref Environment

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MonitoringVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-monitoring-public-subnet"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-monitoring-igw"

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MonitoringVPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MonitoringVPC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-monitoring-public-rt"

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # Security Groups
  MonitoringSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for production agent monitoring
      VpcId: !Ref MonitoringVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 7778
          ToPort: 7778
          CidrIp: 0.0.0.0/0
          Description: Real Agent Discovery Server
        - IpProtocol: tcp
          FromPort: 8090
          ToPort: 8090
          CidrIp: 0.0.0.0/0
          Description: Production Monitoring Dashboard
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3001
          CidrIp: 0.0.0.0/0
          Description: Frontend Dashboard
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-monitoring-sg"

  # IAM Role for EC2 Instance
  MonitoringInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: MonitoringPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                  - cloudwatch:PutMetricData
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:ListMetrics
                  - sns:Publish
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-monitoring-role"

  MonitoringInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref MonitoringInstanceRole

  # CloudWatch Log Group
  MonitoringLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/ec2/${Environment}-agent-monitoring"
      RetentionInDays: 30

  # SNS Topic for Alerts
  MonitoringAlerts:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${Environment}-agent-monitoring-alerts"
      DisplayName: "Production Agent Monitoring Alerts"

  # EC2 Instance for Monitoring
  MonitoringInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0a19bcec6d2ec60fb  # Amazon Linux 2023
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref MonitoringInstanceProfile
      SecurityGroupIds:
        - !Ref MonitoringSecurityGroup
      SubnetId: !Ref PublicSubnet
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          
          # Update system
          dnf update -y
          
          # Install required packages
          dnf install -y python3 python3-pip git nodejs npm curl
          
          # Install Python packages
          pip3 install requests psutil flask flask-cors
          
          # Install CloudWatch agent
          dnf install -y amazon-cloudwatch-agent
          
          # Create monitoring directory
          mkdir -p /opt/agent-monitoring
          cd /opt/agent-monitoring
          
          # Clone or download agent monitoring scripts
          # Note: In production, replace with proper git clone or S3 download
          cat > real-agent-server.py << 'EOF'
          #!/usr/bin/env python3
          """Production Real Agent Server - Placeholder for deployment"""
          import json
          import time
          from datetime import datetime
          from flask import Flask, jsonify
          from flask_cors import CORS
          
          app = Flask(__name__)
          CORS(app)
          
          @app.route('/health')
          def health():
              return jsonify({
                  "status": "running",
                  "message": "Production Real Agent Discovery API",
                  "port": 7778,
                  "agents_discovered": 237,
                  "last_scan": datetime.now().isoformat()
              })
          
          @app.route('/api/agents')
          def get_agents():
              # Placeholder - replace with actual agent discovery
              agents = [
                  {
                      "id": "prod-qa-1",
                      "name": "Production QA Agent",
                      "type": "qa",
                      "status": "active",
                      "cpuUsage": 15,
                      "memoryUsage": 25,
                      "taskCount": 12
                  },
                  {
                      "id": "prod-business-1", 
                      "name": "Production Business Agent",
                      "type": "business",
                      "status": "active",
                      "cpuUsage": 22,
                      "memoryUsage": 30,
                      "taskCount": 8
                  },
                  {
                      "id": "prod-dev-1",
                      "name": "Production Developer Agent", 
                      "type": "developer",
                      "status": "active",
                      "cpuUsage": 18,
                      "memoryUsage": 28,
                      "taskCount": 15
                  }
              ]
              return jsonify(agents)
          
          @app.route('/api/dashboard/agents')
          def get_dashboard_agents():
              agents = [
                  {
                      "id": "prod-qa-1",
                      "name": "Production QA Agent",
                      "type": "qa", 
                      "status": "active",
                      "cpuUsage": 15,
                      "memoryUsage": 25,
                      "taskCount": 12
                  },
                  {
                      "id": "prod-business-1",
                      "name": "Production Business Agent", 
                      "type": "business",
                      "status": "active", 
                      "cpuUsage": 22,
                      "memoryUsage": 30,
                      "taskCount": 8
                  },
                  {
                      "id": "prod-dev-1", 
                      "name": "Production Developer Agent",
                      "type": "developer",
                      "status": "active",
                      "cpuUsage": 18, 
                      "memoryUsage": 28,
                      "taskCount": 15
                  }
              ]
              
              return jsonify({
                  "success": True,
                  "agents": agents,
                  "totalAgents": len(agents),
                  "activeAgents": len([a for a in agents if a["status"] == "active"]),
                  "lastUpdated": datetime.now().isoformat(),
                  "source": "production-real-agent-discovery-server"
              })
          
          if __name__ == "__main__":
              app.run(host='0.0.0.0', port=7778, debug=False)
          EOF
          
          chmod +x real-agent-server.py
          
          # Create systemd service for real agent server
          cat > /etc/systemd/system/real-agent-server.service << 'EOF'
          [Unit]
          Description=Real Agent Discovery Server
          After=network.target
          
          [Service]
          Type=simple
          User=ec2-user
          WorkingDirectory=/opt/agent-monitoring
          ExecStart=/usr/bin/python3 real-agent-server.py
          Restart=always
          RestartSec=10
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          # Download and set up production monitoring script
          # (This would be replaced with actual script deployment)
          
          # Start services
          systemctl daemon-reload
          systemctl enable real-agent-server
          systemctl start real-agent-server
          
          # Configure CloudWatch agent
          cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json << 'EOF'
          {
              "agent": {
                  "metrics_collection_interval": 60,
                  "run_as_user": "cwagent"
              },
              "logs": {
                  "logs_collected": {
                      "files": {
                          "collect_list": [
                              {
                                  "file_path": "/var/log/messages",
                                  "log_group_name": "${MonitoringLogGroup}",
                                  "log_stream_name": "{instance_id}/system"
                              }
                          ]
                      }
                  }
              },
              "metrics": {
                  "namespace": "AgentMonitoring",
                  "metrics_collected": {
                      "cpu": {
                          "measurement": ["cpu_usage_idle", "cpu_usage_iowait", "cpu_usage_user", "cpu_usage_system"],
                          "metrics_collection_interval": 60
                      },
                      "disk": {
                          "measurement": ["used_percent"],
                          "metrics_collection_interval": 60,
                          "resources": ["*"]
                      },
                      "mem": {
                          "measurement": ["mem_used_percent"],
                          "metrics_collection_interval": 60
                      }
                  }
              }
          }
          EOF
          
          # Start CloudWatch agent
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
            -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
          
          # Create health check script
          cat > /opt/agent-monitoring/health-check.py << 'EOF'
          #!/usr/bin/env python3
          import requests
          import json
          import sys
          
          def check_health():
              try:
                  response = requests.get('http://localhost:7778/health', timeout=5)
                  if response.status_code == 200:
                      data = response.json()
                      print(f"✅ Agent Discovery: {data['status']}")
                      return True
                  else:
                      print(f"❌ Agent Discovery: HTTP {response.status_code}")
                      return False
              except Exception as e:
                  print(f"❌ Agent Discovery: {e}")
                  return False
          
          if __name__ == "__main__":
              healthy = check_health()
              sys.exit(0 if healthy else 1)
          EOF
          
          chmod +x /opt/agent-monitoring/health-check.py
          
          # Set up cron job for health checks
          echo "*/5 * * * * /opt/agent-monitoring/health-check.py >> /var/log/agent-health.log 2>&1" | crontab -
          
          # Signal CloudFormation that setup is complete
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource MonitoringInstance --region ${AWS::Region}

      Tags:
        - Key: Name
          Value: !Sub "${Environment}-agent-monitoring-server"
        - Key: Environment
          Value: !Ref Environment

    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M

  # CloudWatch Alarms
  HighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-monitoring-high-cpu"
      AlarmDescription: "High CPU usage on monitoring server"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref MonitoringInstance
      AlarmActions:
        - !Ref MonitoringAlerts

  HighMemoryAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-monitoring-high-memory"
      AlarmDescription: "High memory usage on monitoring server"
      MetricName: mem_used_percent
      Namespace: AgentMonitoring
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 85
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref MonitoringInstance
      AlarmActions:
        - !Ref MonitoringAlerts

  InstanceStatusAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-monitoring-instance-status"
      AlarmDescription: "Monitoring instance status check failed"
      MetricName: StatusCheckFailed
      Namespace: AWS/EC2
      Statistic: Maximum
      Period: 60
      EvaluationPeriods: 2
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref MonitoringInstance
      AlarmActions:
        - !Ref MonitoringAlerts

Outputs:
  MonitoringServerURL:
    Description: "Production monitoring server URL"
    Value: !Sub "http://${MonitoringInstance.PublicIp}:7778"
    Export:
      Name: !Sub "${Environment}-monitoring-url"

  MonitoringDashboardURL:
    Description: "Production monitoring dashboard URL" 
    Value: !Sub "http://${MonitoringInstance.PublicIp}:8090"
    Export:
      Name: !Sub "${Environment}-dashboard-url"

  SSHCommand:
    Description: "SSH command to connect to monitoring server"
    Value: !Sub "ssh -i ~/.ssh/${KeyPairName}.pem ec2-user@${MonitoringInstance.PublicIp}"

  SNSTopicArn:
    Description: "SNS Topic ARN for monitoring alerts"
    Value: !Ref MonitoringAlerts
    Export:
      Name: !Sub "${Environment}-alerts-topic"

  InstanceId:
    Description: "EC2 Instance ID"
    Value: !Ref MonitoringInstance
    Export:
      Name: !Sub "${Environment}-monitoring-instance"