name: Deploy Infrastructure

on:
  push:
    branches: [main, staging, dev]
    paths:
      - 'infrastructure/**'
      - '.github/workflows/deploy-infrastructure.yml'
  pull_request:
    branches: [main]
    paths:
      - 'infrastructure/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

permissions:
  id-token: write
  contents: read

jobs:
  validate:
    name: Validate CloudFormation Template
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Validate CloudFormation template
        run: |
          aws cloudformation validate-template \
            --template-body file://infrastructure/dashboard-infrastructure.yaml

      - name: Run CFN Lint
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_CLOUDFORMATION: true
          VALIDATE_ALL_CODEBASE: false

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/dev' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Deploy CloudFormation stack
        run: |
          aws cloudformation deploy \
            --template-file infrastructure/dashboard-infrastructure.yaml \
            --stack-name niro-agent-dashboard-dev \
            --parameter-overrides file://infrastructure/parameters-dev.json \
            --capabilities CAPABILITY_NAMED_IAM \
            --tags Environment=dev Project=NiroAgentDashboard \
            --no-fail-on-empty-changeset

      - name: Get stack outputs
        id: stack-outputs
        run: |
          aws cloudformation describe-stacks \
            --stack-name niro-agent-dashboard-dev \
            --query 'Stacks[0].Outputs' \
            --output json > stack-outputs.json
          
          echo "frontend-bucket=$(jq -r '.[] | select(.OutputKey=="FrontendBucketName") | .OutputValue' stack-outputs.json)" >> $GITHUB_OUTPUT
          echo "cloudfront-id=$(jq -r '.[] | select(.OutputKey=="CloudFrontDistributionId") | .OutputValue' stack-outputs.json)" >> $GITHUB_OUTPUT
          echo "website-url=$(jq -r '.[] | select(.OutputKey=="WebsiteURL") | .OutputValue' stack-outputs.json)" >> $GITHUB_OUTPUT
          echo "api-endpoint=$(jq -r '.[] | select(.OutputKey=="ApiEndpoint") | .OutputValue' stack-outputs.json)" >> $GITHUB_OUTPUT

      - name: Create deployment summary
        run: |
          echo "## ðŸš€ Development Infrastructure Deployed" >> $GITHUB_STEP_SUMMARY
          echo "| Resource | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Bucket | \`${{ steps.stack-outputs.outputs.frontend-bucket }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| CloudFront ID | \`${{ steps.stack-outputs.outputs.cloudfront-id }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Website URL | [${{ steps.stack-outputs.outputs.website-url }}](${{ steps.stack-outputs.outputs.website-url }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| API Endpoint | [${{ steps.stack-outputs.outputs.api-endpoint }}](${{ steps.stack-outputs.outputs.api-endpoint }}/health) |" >> $GITHUB_STEP_SUMMARY

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/staging' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Deploy CloudFormation stack
        run: |
          aws cloudformation deploy \
            --template-file infrastructure/dashboard-infrastructure.yaml \
            --stack-name niro-agent-dashboard-staging \
            --parameter-overrides file://infrastructure/parameters-staging.json \
            --capabilities CAPABILITY_NAMED_IAM \
            --tags Environment=staging Project=NiroAgentDashboard \
            --no-fail-on-empty-changeset

      - name: Get stack outputs
        id: stack-outputs
        run: |
          aws cloudformation describe-stacks \
            --stack-name niro-agent-dashboard-staging \
            --query 'Stacks[0].Outputs' \
            --output json > stack-outputs.json
          
          echo "frontend-bucket=$(jq -r '.[] | select(.OutputKey=="FrontendBucketName") | .OutputValue' stack-outputs.json)" >> $GITHUB_OUTPUT
          echo "cloudfront-id=$(jq -r '.[] | select(.OutputKey=="CloudFrontDistributionId") | .OutputValue' stack-outputs.json)" >> $GITHUB_OUTPUT
          echo "website-url=$(jq -r '.[] | select(.OutputKey=="WebsiteURL") | .OutputValue' stack-outputs.json)" >> $GITHUB_OUTPUT
          echo "api-endpoint=$(jq -r '.[] | select(.OutputKey=="ApiEndpoint") | .OutputValue' stack-outputs.json)" >> $GITHUB_OUTPUT

      - name: Create deployment summary
        run: |
          echo "## ðŸš€ Staging Infrastructure Deployed" >> $GITHUB_STEP_SUMMARY
          echo "| Resource | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Bucket | \`${{ steps.stack-outputs.outputs.frontend-bucket }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| CloudFront ID | \`${{ steps.stack-outputs.outputs.cloudfront-id }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Website URL | [${{ steps.stack-outputs.outputs.website-url }}](${{ steps.stack-outputs.outputs.website-url }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| API Endpoint | [${{ steps.stack-outputs.outputs.api-endpoint }}](${{ steps.stack-outputs.outputs.api-endpoint }}/health) |" >> $GITHUB_STEP_SUMMARY

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Deploy CloudFormation stack
        run: |
          aws cloudformation deploy \
            --template-file infrastructure/dashboard-infrastructure.yaml \
            --stack-name niro-agent-dashboard-prod \
            --parameter-overrides file://infrastructure/parameters-prod.json \
            --capabilities CAPABILITY_NAMED_IAM \
            --tags Environment=prod Project=NiroAgentDashboard \
            --no-fail-on-empty-changeset
