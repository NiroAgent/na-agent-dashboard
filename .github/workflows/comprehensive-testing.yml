name: Comprehensive Testing Suite

on:
  # Automatic triggers
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  
  # Manual trigger for ad-hoc testing
  workflow_dispatch:
    inputs:
      test_environment:
        description: 'Environment to test'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - e2e
          - performance
          - security
      include_load_tests:
        description: 'Include load testing'
        required: false
        default: false
        type: boolean
        
  # Nightly regression testing
  schedule:
    - cron: '0 2 * * *'  # 2 AM UTC every night

env:
  NODE_VERSION: '22.x'
  PYTHON_VERSION: '3.11'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      test-matrix: ${{ steps.matrix.outputs.matrix }}
      should-run-load-tests: ${{ steps.should-load-test.outputs.result }}
    steps:
      - name: Generate test matrix
        id: matrix
        run: |
          if [ "${{ github.event_name }}" = "schedule" ]; then
            # Full nightly testing
            MATRIX='{"environment":["dev","staging"],"test-type":["all"],"include-load":["true"]}'
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual dispatch testing
            MATRIX='{"environment":["${{ github.event.inputs.test_environment }}"],"test-type":["${{ github.event.inputs.test_type }}"],"include-load":["${{ github.event.inputs.include_load_tests }}"]}'
          else
            # PR/Push testing
            MATRIX='{"environment":["dev"],"test-type":["unit","integration"],"include-load":["false"]}'
          fi
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

      - name: Determine load testing
        id: should-load-test
        run: |
          if [ "${{ github.event_name }}" = "schedule" ] || [ "${{ github.event.inputs.include_load_tests }}" = "true" ]; then
            echo "result=true" >> $GITHUB_OUTPUT
          else
            echo "result=false" >> $GITHUB_OUTPUT
          fi

  # Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    needs: setup
    if: contains(fromJson(needs.setup.outputs.test-matrix).test-type, 'unit') || contains(fromJson(needs.setup.outputs.test-matrix).test-type, 'all')
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.test-matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'mfe/package-lock.json'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd mfe && npm ci
          pip install pytest requests flask

      - name: Run unit tests
        run: |
          echo "Running unit tests for ${{ matrix.environment }}"
          cd mfe && npm test
          python -m pytest tests/unit/ -v

      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results-${{ matrix.environment }}
          path: |
            mfe/coverage/
            test-results.xml

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: setup
    if: contains(fromJson(needs.setup.outputs.test-matrix).test-type, 'integration') || contains(fromJson(needs.setup.outputs.test-matrix).test-type, 'all')
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.test-matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'mfe/package-lock.json'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd mfe && npm ci
          pip install requests pytest flask

      - name: Start real agent server
        run: |
          python real-agent-server.py --port 7778 &
          sleep 5

      - name: Build frontend
        run: |
          cd mfe && npm run build

      - name: Start frontend
        run: |
          cd mfe && npm run preview -- --port 3000 --host 0.0.0.0 &
          sleep 10

      - name: Run integration tests
        run: |
          echo "Running integration tests for ${{ matrix.environment }}"
          python tests/integration/test_agent_discovery.py
          python tests/integration/test_dashboard_integration.py

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results-${{ matrix.environment }}
          path: |
            test-results/
            logs/

  # End-to-End Tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: setup
    if: contains(fromJson(needs.setup.outputs.test-matrix).test-type, 'e2e') || contains(fromJson(needs.setup.outputs.test-matrix).test-type, 'all')
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.test-matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'mfe/package-lock.json'

      - name: Install Playwright
        run: |
          cd mfe && npm ci
          npx playwright install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Get deployment endpoints
        id: endpoints
        run: |
          if [ "${{ matrix.environment }}" = "prod" ]; then
            STACK_NAME="prod-niro-node22-final"
          elif [ "${{ matrix.environment }}" = "staging" ]; then
            STACK_NAME="staging-niro-node22-final"
          else
            STACK_NAME="dev-niro-node22-final"
          fi
          
          API_ENDPOINT=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiEndpoint`].OutputValue' \
            --output text 2>/dev/null || echo "http://localhost:7778")
          
          echo "api-endpoint=$API_ENDPOINT" >> $GITHUB_OUTPUT

      - name: Start local services (if needed)
        if: matrix.environment == 'dev'
        run: |
          python real-agent-server.py --port 7778 &
          cd mfe && npm run preview -- --port 3000 &
          sleep 10

      - name: Run E2E tests
        env:
          API_ENDPOINT: ${{ steps.endpoints.outputs.api-endpoint }}
        run: |
          cd mfe && npx playwright test --reporter=html

      - name: Upload E2E results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results-${{ matrix.environment }}
          path: |
            mfe/playwright-report/
            mfe/test-results/

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: setup
    if: contains(fromJson(needs.setup.outputs.test-matrix).test-type, 'performance') || contains(fromJson(needs.setup.outputs.test-matrix).test-type, 'all')
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.test-matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Artillery
        run: npm install -g artillery@latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Get API endpoint
        id: endpoint
        run: |
          if [ "${{ matrix.environment }}" = "prod" ]; then
            STACK_NAME="prod-niro-node22-final"
          elif [ "${{ matrix.environment }}" = "staging" ]; then
            STACK_NAME="staging-niro-node22-final"
          else
            STACK_NAME="dev-niro-node22-final"
          fi
          
          API_ENDPOINT=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiEndpoint`].OutputValue' \
            --output text 2>/dev/null || echo "http://localhost:7778")
          
          echo "api-endpoint=$API_ENDPOINT" >> $GITHUB_OUTPUT

      - name: Run performance tests
        env:
          API_ENDPOINT: ${{ steps.endpoint.outputs.api-endpoint }}
        run: |
          artillery run tests/performance/api-load-test.yml
          artillery run tests/performance/agent-discovery-test.yml

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results-${{ matrix.environment }}
          path: |
            artillery-report.html
            performance-metrics.json

  # Load Tests (only when explicitly requested or nightly)
  load-tests:
    runs-on: ubuntu-latest
    needs: [setup, integration-tests]
    if: needs.setup.outputs.should-run-load-tests == 'true'
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.test-matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Run load tests
        run: |
          k6 run tests/load/agent-api-load-test.js
          k6 run tests/load/dashboard-load-test.js

      - name: Upload load test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: load-test-results-${{ matrix.environment }}
          path: |
            load-test-results/
            k6-report.html

  # Security Tests
  security-tests:
    runs-on: ubuntu-latest
    needs: setup
    if: contains(fromJson(needs.setup.outputs.test-matrix).test-type, 'security') || contains(fromJson(needs.setup.outputs.test-matrix).test-type, 'all')
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.test-matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'mfe/package-lock.json'

      - name: Install dependencies
        run: |
          cd mfe && npm ci
          npm install -g npm-audit-fix

      - name: Run security audit
        run: |
          cd mfe && npm audit --audit-level moderate
          npm audit fix

      - name: Run SAST scan
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_TYPESCRIPT: true
          VALIDATE_PYTHON: true
          VALIDATE_YAML: true

      - name: Upload security results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-test-results-${{ matrix.environment }}
          path: |
            super-linter.log
            security-report.json

  # Generate comprehensive report
  generate-report:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, performance-tests, security-tests]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate comprehensive report
        run: |
          python tests/scripts/generate-test-report.py \
            --output-format html \
            --output-file comprehensive-test-report.html \
            --include-artifacts .

      - name: Upload comprehensive report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-test-report
          path: comprehensive-test-report.html

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('comprehensive-test-report.html', 'utf8');
            const summary = report.match(/<div class="summary">(.*?)<\/div>/s)?.[1] || 'Report generated';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🧪 Test Results\n\n${summary}\n\n[View full report](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
            });

  # Notify on nightly test failures
  notify-failure:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, performance-tests, security-tests]
    if: failure() && github.event_name == 'schedule'
    steps:
      - name: Send notification
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Nightly Test Failure - ${new Date().toISOString().split('T')[0]}`,
              body: `Nightly regression tests failed. Please check the [workflow run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.`,
              labels: ['bug', 'testing', 'priority-high']
            });